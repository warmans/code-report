#!/usr/bin/env php
<?php
use Symfony\Component\Templating\PhpEngine;
use Symfony\Component\Templating\Helper\SlotsHelper;
use Symfony\Component\Templating\TemplateNameParser;
use Symfony\Component\Templating\Loader\FilesystemLoader;

foreach (array(__DIR__ . '/../../autoload.php', __DIR__ . '/vendor/autoload.php') as $file) {
    if (file_exists($file)) {
        require $file;
        $loaded = true;
        break;
    }
}

$services = new Pimple();

$services['config'] = array(
    'template.paths' => __DIR__.'/template/%name%.html.php'
);

$services['filesystem'] = function () {
    return new \CodeReport\Filesystem();
};

$services['template.engine'] = function () use ($services) {
    $engine =  new PhpEngine(new TemplateNameParser(), new FilesystemLoader($services['config']['template.paths']));
    $engine->set(new SlotsHelper());
    return $engine;
};

$services['report.generator'] = function () use ($services) {
    return new \CodeReport\Report\Generator($services['template.engine'], $services['filesystem']);
};

$services['report.parser.factory'] = function () use ($services) {
    return new \CodeReport\Report\FileParser\ParserFactory($services['filesystem']);
};

$services['command.generate'] = function () use ($services) {
    return new CodeReport\Console\Command\Generate(
        $services['report.generator'],
        $services['report.parser.factory']
    );
};

$application = new Symfony\Component\Console\Application();
$application->add($services['command.generate']);
$application->run();
